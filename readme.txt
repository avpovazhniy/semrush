build.sh - скрипт для компиляции
client.c - исходный код клиента
server.c - исходный код сервера
common.c - исходный код общего для клиента и сервера функционала
common.h - заголовочный файл, содержит в себе следующие настраиваемые параметры:

BUFFER_SIZE - максимальный размер буфера в байтах для чтения из файла/сокета или записи в файл/сокет
MESSAGE_MAX_SIZE - размер сообщений в байтах для обмена служебной информацией между клиентом и сервером,
                   реализован некоторый примитивный текстовый протокол для передачи имени файла на сервер
                   и ошибок от сервера на клиент.
BACK_LOG_QUEUE_LENGTH - очередь входящих TCP соединений сервера в ожидании accept()

Ограничения применения:

клиент не обрабатывает пути к файлам, работает только с файлами в своём текущем каталоге

сервер получает от клиента файлы и помещает в свой текущий каталог

клиент и сервер расчитаны на корректное применение в рамках тестового задания, отказоустойчивость от злонамеренных попыток
нарушить работу с помощью посторонних утилит не закладывалась

обрабатываются не все возможные сбои/ошибки протокола TCP, то есть подразумевается что это некий концепт, но ни в коем случае не "релиз"

Клиент:

запуск без параметров выводит подсказку параметров командной строки
работает по следующей схеме - пытается открыть файл, если успешно, то устанавливает соединение с сервером и передаёт имя файла,
далее ожидает от сервера положительного ответа на начало передачи файла (текстовое сообщение "OK") либо сообщение об ошибке
(например файл с таким именем уже существует в папке назначения сервера). Если передача одобрена сервером начинает передавать
файл кусками размером BUFFER_SIZE. В консоль выводятся некоторые сообщения о процессе передачи файла.

Сервер:

запуск без параметров выводит подсказку параметров командной строки
работает по двухпоточной схеме, один (главный) поток ожидает входящих соединений, если соединение установлено, то происходит
проверка существование файла с таким именем в текущем каталоге, в случае если файл уже существует будет отправлено сообщение
клиенту и соединение разорвётся, иначе файл будет поставлен в очередь на обработку. Очередь представляет из себя однонаправленный
связный список, который обрабатывается вторым (дочерним) потоком, если в очереди отстутствуют элементы, поток обработчик
файлов "засыпает". Если очередь не пуста обработчик будет "бегать" по элементам списка и вычитывать из сокетов данные передаваемые
клиентами и записывать в файлы на диске, порциями размером BUFFER_SIZE (т.е. если файл размером больше BUFFER_SIZE, он будет обрабатываться
за несколько проходов очереди). Один элемент списка соответствует одному TCP соединению (и ассоциированному с ним файлу).
По завершению обработки файла соответствующий этому соединению элемент очереди удаляется.
Таким образом сервер способен постоянно принимать новые соединения и одновременно обрабатывать существующие.

Также архив содержит два скрипта: test-server.sh и test-client.sh
Первый создаёт каталог upload в текущей директории, копирует туда серверную часть и запускает его.
Второй скрипт копирует клиент в некоторый каталог (настраивается в скрипте), генерирует список файлов этого каталога (без путей) и
запускает множество процессов клиентов в фоне (для имитации множества входящих соединений).
Скрипты не идеальные, приложены для описания проведенного тестирования.
Разработка и тестирование проводилось на виртуальной машине Linux на основе Centos 7 (с правами root),
также была проверена компиляция исходных кодов на Debian и Ubuntu.

Временные затраты составили приблизительно 32 часа.